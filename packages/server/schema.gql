# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AddJobPostingAddressInput {
  addressId: ID
  newAddress: AddressInput2
}

input AddJobPostingInput {
  jobId: ID!
  address: AddJobPostingAddressInput!
  applicationId: ID!
  posting: JobPostingInput!
}

type AddressDto {
  id: ID!
  street: String!
  street2: String
  city: String!
  state: String!
  postal_code: String!
  country: String!
  coord_lat: Float!
  coord_lng: Float!
}

input AddressInput {
  street: String!
  street2: String
  city: String!
  state: String!
  postal_code: String!
  country: String!
  coord_lat: Float!
  coord_lng: Float!
}

input AddressInput2 {
  street: String
  street2: String
  city: String!
  state: String!
  postal_code: String!
  country: String!
  coord_lat: Float!
  coord_lng: Float!
}

type ApplicationDto {
  id: ID!
  title: String!
  fields: [ApplicationFieldDto!]!
  created_at: DateTime!
}

type ApplicationFieldDto {
  id: ID!
  question: String!
  required: Boolean!
  type: ApplicationFieldsEnum!
  options: [String!]!
}

input ApplicationFieldInput {
  question: String!
  required: Boolean!
  type: ApplicationFieldsEnum!
  options: [String!]
}

enum ApplicationFieldsEnum {
  text
  textarea
  radio
  checkbox
}

input ApplicationInput {
  title: String!
  fields: [ApplicationFieldInput!]!
}

type CompanyContactDto {
  id: ID!
  phone: String!
  address: AddressDto!
}

input CompanyContactInput {
  phone: String!
  address: AddressInput!
}

type CompanyDto {
  id: ID!
  name: String!
  slug: String!
  setup_complete: Boolean!
  setup_stage: Int!
}

type CompanyImageDto {
  id: ID!
  filename: String!
  path: String!
  thumb: String
  awsKey: String!
}

input CompanyInput {
  name: String!
  slug: String!
}

type CompanyMemberDto {
  id: ID!
  role: RoleEnum!
  user: UserDto!
}

input CompanyMemberInput {
  userId: ID!
  role: MemberRolesEnum!
  confirmed: Boolean
}

type CompanyProfileDto {
  id: ID!
  about: String!
  cover_image: String!
  profile_image: String!
}

input CompanyProfileInput {
  profile_image: String
  cover_image: String
  about: String!
}

input CoordsInput {
  lng: Float!
  lat: Float!
}

type CreateCompanyDto {
  id: ID!
  name: String!
  slug: String!
  setup_complete: Boolean!
  setup_stage: Int!
  contact: CompanyContactDto!
}

type CurrentCompanyDto {
  id: ID!
  name: String!
  slug: String!
  setup_complete: Boolean!
  setup_stage: Int!
  members: [CompanyMemberDto!]!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input ForgotPasswordInput {
  email: String!
}

type JobAddressDto {
  id: ID!
  street: String!
  street2: String
  city: String!
  state: String!
  postal_code: String!
  country: String!
  coord_lat: Float!
  coord_lng: Float!
}

type JobDto {
  id: ID!
  title: String!
  summary: String!
  description: String!
  created_at: DateTime!
  type: String!
  tags: [String!]!
  default_image: String!
  defaultApplicationId: String
  postings: [JobPostingDto!]!
}

input JobInput {
  title: String!
  summary: String!
  description: String!
  type: String!
  tags: [String!]
  default_image: String!
  defaultApplicationId: String
}

type JobPostingDto {
  id: ID!
  active: Boolean!
  start_date: DateTime!
  end_date: DateTime!
  pay_rate: Int!
  total_openings: Int!
  remaining_openings: Int!
  apply_deadline: DateTime!
  job: JobDto!
}

input JobPostingInput {
  active: Boolean!
  start_date: DateTime!
  end_date: DateTime!
  pay_rate: String!
  total_openings: Int!
  apply_deadline: DateTime!
}

type JobPostingResultsDto {
  count: Int!
  postings: [JobPostingDto!]!
}

input LocationInput {
  locality: String!
  coords: CoordsInput!
}

input LoginInput {
  email: String!
  password: String!
}

type MemberCompanyDto {
  id: ID!
  role: RoleEnum!
  user: UserDto!
  company: CompanyDto!
}

enum MemberRolesEnum {
  owner
  admin
  manager
  associate
}

type MeSessionDto {
  id: ID!
  first_name: String!
  last_name: String!
  email: String!
  realm: String!
  is_verified: Boolean!
  setup: [String!]!
  created_at: DateTime!
  search: SearchLocationDto
}

type Mutation {
  register(input: RegisterInput!): UserDto!
  login(input: LoginInput!): UserDto!
  logout: Boolean!
  forgotPassword(input: ForgotPasswordInput!): Boolean!
  createCompanyContact(companySlug: String!, input: CompanyContactInput!): CompanyContactDto!
  updateCompanyContact(companySlug: String!, input: UpdateCompanyContactInput!): CompanyContactDto!
  createCompanyProfile(companySlug: String!, input: CompanyProfileInput!): CompanyProfileDto!
  updateCompanyProfile(companySlug: String!, input: UpdateCompanyProfileInput!): CompanyProfileDto!
  createCompanyMembers(companySlug: String!, input: [CompanyMemberInput!]!): [CompanyMemberDto!]!
  createCompany(input: CompanyInput!): CreateCompanyDto!
  updateCompany(companySlug: String!, input: UpdateCompanyInput!): CreateCompanyDto!
  createJob(input: JobInput!, companySlug: String!): JobDto!
  updateJob(input: UpdateJobInput!, companySlug: String!): JobDto!
  createPosting(input: AddJobPostingInput!, companySlug: String!): JobPostingDto!
  createApplication(input: ApplicationInput!, companySlug: String!): ApplicationDto!
  uploadImage(input: UploadImageInput!, companySlug: String!): CompanyImageDto!
}

input PaginationInput {
  skip: Int = 0
  limit: Int = 10
}

type Query {
  me: MeSessionDto
  allUsers: [UserDto!]!
  userLocation: SearchLocationDto
  findCompanyContact(companySlug: String!): CompanyContactDto
  findCompanyAddresses(companySlug: String!): [AddressDto!]!
  findCompanyProfile(companySlug: String!): CompanyProfileDto
  findCompanies: [MemberCompanyDto!]!
  findCompanyMembers(companySlug: String!): [CompanyMemberDto!]!
  findCompany(companySlug: String!): CurrentCompanyDto!
  generateCompanySlug(name: String!): String!
  findCompanySlug(name: String!): String
  findAllJobs(companySlug: String!): [JobDto!]!
  findJob(id: ID!, companySlug: String!): JobDto!
  findCurrentPostings(input: PaginationInput!, companySlug: String!): JobPostingResultsDto!
  findJobAddresses(companySlug: String!): [JobAddressDto!]!
  findPosting(postingId: String!, companySlug: String!): JobPostingDto!
  findAllApplications(companySlug: String!): [ApplicationDto!]!
  search(input: SearchInput!): SearchDto!
  searchFindJob(id: ID!): SearchJobResultDto!
  findAllCompanyImages(companySlug: String!): [CompanyImageDto!]!
}

input RegisterInput {
  first_name: String!
  last_name: String!
  email: String!
  password: String!
}

enum RoleEnum {
  owner
  admin
  manager
  associate
}

type SearchCompanyDto {
  name: String!
  profile: SearchCompanyProfileDto!
}

type SearchCompanyProfileDto {
  profile_image: String!
}

type SearchCoordsDto {
  lng: Float!
  lat: Float!
}

type SearchDto {
  count: Int!
  results: [SearchResultListDto!]!
}

input SearchFiltersInput {
  radius: Int = 200
  pay_rate: Int = 0
}

input SearchInput {
  search: String!
  location: LocationInput!
  filters: SearchFiltersInput!
  pagination: SearchPaginationInput!
}

type SearchJobDto {
  id: ID!
  title: String!
  postings: [SearchJobPostingDto!]!
  company: SearchCompanyDto!
}

type SearchJobPostingDto {
  pay_rate: String!
  end_date: DateTime!
  start_date: DateTime!
  apply_deadline: DateTime!
  remaining_openings: Int!
  address: AddressDto!
}

type SearchJobResultDto {
  id: ID!
  title: String!
  postings: [SearchJobPostingDto!]!
  company: SearchCompanyDto!
  default_image: String!
  description: String!
  type: String!
  tags: [String!]!
}

type SearchLocationDto {
  locality: String!
  coords: SearchCoordsDto!
}

input SearchPaginationInput {
  skip: Int!
  take: Int!
}

type SearchResultListDto {
  job: SearchJobDto!
  rank: Float!
}

input UpdateAddressInput {
  id: ID!
  street: String
  street2: String
  city: String
  state: String
  postal_code: String
  country: String
  coord_lat: Float
  coord_lng: Float
}

input UpdateCompanyContactInput {
  id: ID!
  phone: String
  address: UpdateAddressInput!
}

input UpdateCompanyInput {
  name: String
  slug: String
  type: String
}

input UpdateCompanyProfileInput {
  id: ID!
  profile_image: String
  cover_image: String
  about: String
}

input UpdateJobInput {
  id: ID!
  title: String
  summary: String
  description: String
  type: String
  tags: [String!]
  default_image: String
  defaultApplicationId: String
}

"""Upload custom scalar type"""
scalar Upload

input UploadImageInput {
  image: Upload!
}

type UserDto {
  id: ID!
  first_name: String!
  last_name: String!
  email: String!
  realm: String!
  is_verified: Boolean!
  setup: [String!]!
  created_at: DateTime!
}
